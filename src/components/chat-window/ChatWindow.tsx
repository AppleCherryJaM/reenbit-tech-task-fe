import React, { useState, useEffect, useRef, useCallback } from 'react';
import type { Chat, Message as MessageType } from '../../types';
import { apiService } from '../../services/api';
import { MessageInput, Message } from '../components';
import { useSocketEnhanced } from '../../hooks/useSocketEnhanced';
import './ChatWindow.css';

interface ChatWindowProps {
  chat: Chat;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ chat }) => {
  const [messages, setMessages] = useState<MessageType[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [hasNewAutoResponse, setHasNewAutoResponse] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  const loadMessages = useCallback(async () => {
    try {
      setLoading(true);
      const messagesData = await apiService.getChatMessages(chat.id);
      console.log('üì• Loaded messages from API:', messagesData.length);
      setMessages(messagesData);
      setError(null);
    } catch (err) {
      console.error('‚ùå Error loading messages:', err);
      setError('Failed to load messages');
    } finally {
      setLoading(false);
    }
  }, [chat.id]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ socket
  const handleNewMessage = useCallback((newMessage: MessageType) => {
    console.log('üéØ handleNewMessage called with:', newMessage);
    setMessages(prev => {
      if (prev.some(msg => msg.id === newMessage.id)) {
        console.log('‚ö†Ô∏è Duplicate message detected, skipping');
        return prev;
      }
      console.log('‚úÖ Adding new message to state');
      return [...prev, newMessage];
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const handleNotification = useCallback((notification: any) => {
    console.log('üîî Notification received:', notification);
  }, []);

  const { joinChat, leaveChat, isConnected, manualReconnect } = useSocketEnhanced({
    onNewMessage: handleNewMessage,
    onNotification: handleNotification
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleMessageSent = useCallback((newMessage: MessageType) => {
    console.log('‚úÖ User message sent:', newMessage);
    setMessages(prev => [...prev, newMessage]);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    setHasNewAutoResponse(true);
  }, []);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // –ü—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    if (chat.id) {
      console.log('üîÑ Chat changed to:', chat.id);
      loadMessages();
      joinChat(chat.id);
    }

    return () => {
      if (chat.id) {
        leaveChat(chat.id);
      }
    };
  }, [chat.id, loadMessages, joinChat, leaveChat]);

  // –£–º–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç
  useEffect(() => {
    if (!hasNewAutoResponse || !chat.id) return;

    console.log('‚è∞ Starting smart polling for auto-response...');
    
    const pollInterval = setInterval(() => {
      loadMessages();
    }, 1000);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    const timeout = setTimeout(() => {
      console.log('‚èπÔ∏è Stopping smart polling');
      setHasNewAutoResponse(false);
      clearInterval(pollInterval);
    }, 10000);

    return () => {
      clearInterval(pollInterval);
      clearTimeout(timeout);
    };
  }, [hasNewAutoResponse, chat.id, loadMessages]);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç
  useEffect(() => {
    const lastMessage = messages[messages.length - 1];
    if (lastMessage?.type === 'auto' && hasNewAutoResponse) {
      console.log('‚úÖ Auto-response received, stopping polling');
      setHasNewAutoResponse(false);
    }
  }, [messages, hasNewAutoResponse]);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  if (loading && messages.length === 0) {
    return (
      <div className="chat-window">
        <div className="chat-header">
          <h3>{chat.firstName} {chat.lastName}</h3>
        </div>
        <div className="loading-messages">Loading messages...</div>
      </div>
    );
  }

  return (
    <div className="chat-window">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div className="chat-header">
        <div className="chat-avatar">
          {chat.firstName[0]}{chat.lastName[0]}
        </div>
        <div className="chat-info">
          <h3>{chat.firstName} {chat.lastName}</h3>
          <div className="connection-status">
            <span className={`status-dot ${isConnected ? 'connected' : 'disconnected'}`}></span>
            <span className='status-text'>{isConnected ? 'Connected' : 'Disconnected'}</span>
            {!isConnected && (
              <button onClick={manualReconnect} className="reconnect-btn">
                Reconnect
              </button>
            )}
          </div>
        </div>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="messages-container">
        {error && (
          <div className="error-message">
            {error}
            <button onClick={loadMessages}>Retry</button>
          </div>
        )}

        {messages.length === 0 ? (
          <div className="no-messages">
            No messages yet. Start the conversation!
          </div>
        ) : (
          <div className="messages-list">
            {messages.map((message) => (
              <Message 
                key={message.id} 
                message={message} 
              />
            ))}
            <div ref={messagesEndRef} />
          </div>
        )}
      </div>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <MessageInput 
        key={chat.id}
        chatId={chat.id}
        onMessageSent={handleMessageSent}
        disabled={loading}
      />
    </div>
  );
};

export default ChatWindow;